### How Pod-to-Pod Communication Works with FQDN in Kubernetes

1. **Pods in the Same Namespace:**
   - Pods can communicate with each other by their **Service name**.
   - Kubernetes automatically assigns **DNS names** to Services. When Pods in the same namespace need to communicate, you can use the Service name as an FQDN.
   - The format for a Service FQDN in the same namespace is:
     ```
     <service-name>.<namespace>.svc.cluster.local
     ```

   - In most cases, if Pods are in the same namespace, you donâ€™t need the full FQDN and can just use the Service name:
     ```
     <service-name>
     ```

_______________________________________________________
Step 1: Create the db-pod (Database Pod)
## db.yml
_______________________________________________________
apiVersion: v1
kind: Pod
metadata:
  name: db-pod
  labels:
    app: database
spec:
  containers:
  - name: mysql-container
    image: mysql:5.7
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: "rootpassword"
    ports:
    - containerPort: 3306
____________________________________________________________
Step 2: Create a Service for the Database Pod
## db-svc.yml
_________________________________________________________
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: database
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  type: ClusterIP

____________________________________________________________
Step 3: Create the app-pod (Web Application Pod)
## app.yml
-------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: app-pod
  labels:
    app: webapp
spec:
  containers:
  - name: webapp-container
    image: debian:latest
    command: ["/bin/sh"]
    args: ["-c", "while true; do sleep 3600; done"]

_______________________________________________________



# Step 4: Test Communication Between Pods Using FQDN
kubectl exec -it app-pod -- /bin/bash

# Enter the app-pod:
kubectl exec -it app-pod -- /bin/bash

Step 1: Install default-mysql-client
apt-get update && apt-get install -y default-mysql-client

Step 2: Verify Installation
mysql --version

Step 3: Connect to MySQL Service
mysql -h db-service.default.svc.cluster.local -P 3306 -u root -p
